plugins {
    id 'java'
    id 'org.springframework.boot' version '3.1.4'
    id 'io.spring.dependency-management' version '1.1.3'
    id 'nu.studer.jooq' version '8.2.1'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '17'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    runtimeOnly 'com.mysql:mysql-connector-j'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    implementation 'org.springframework.boot:spring-boot-starter-jooq'

    // https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-data-jpa
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

    jooqGenerator('com.mysql:mysql-connector-j')
    jooqGenerator('org.jooq:jooq-meta-extensions-hibernate')
    jooqGenerator('org.springframework.boot:spring-boot-starter-data-jpa')
    jooqGenerator('org.jooq:jooq-meta-extensions')
}

tasks.named('test') {
    useJUnitPlatform()
}

// 1. database
jooq {
    configurations {
        main {
            generationTool {
                logging = 'INFO' // TRACE, DEBUG, INFO, WARN, ERROR, FATAL
                onError = 'LOG'  // FAIL, LOG, SILENT
                jdbc {
                    driver = 'com.mysql.cj.jdbc.Driver'
                    url = 'jdbc:mysql://localhost:3306/test_db'
                    user = 'root'
                    password = 'root'
//                    properties {
//                        property {
//                            key = 'ssl'
//                            value = 'true'
//                        }
//                    }
                }
                generator {
                    name = 'org.jooq.codegen.DefaultGenerator'
                    database {
                        name = 'org.jooq.meta.mysql.MySQLDatabase'
                        inputSchema = 'test_db'
                        includes = '.*'
                        excludes = ''
                    }
                    target {
                        packageName = 'com.example.springjooq.entity.jooq'
                    }
                    strategy.name = "org.jooq.codegen.DefaultGeneratorStrategy"
                }
            }
        }
    }
}

// 2 entity - entity를 별도의 프로젝트/패키지로 구성해야한다. entity를 찾을 수 없다고 나오는 건 그 때문... --;
//jooq {
//    configurations {
//        main {
//            generateSchemaSourceOnCompilation = false
//            generationTool {
//                logging = org.jooq.meta.jaxb.Logging.WARN
//                generator {
//                    database {
//                        name = 'org.jooq.meta.extensions.jpa.JPADatabase'
//                        inputCatalog = 'a'
//                        inputSchema = 'test_db'
//                        properties {
//                            property {
//                                key = 'packages'
//                                value = 'com.example.springjooq.entity'
//                            }
//                            property {
//                                key = 'useAttributeConverters'
//                                value = true
//                            }
//                        }
//                    }
//                    target {
//                        packageName = 'com.example.db.jooq'
//                        directory = 'build/generated/sources/jooq/java/main'
//                    }
//                }
//            }
//        }
//    }
//}


// 3. entity - entity를 별도의 프로젝트/패키지로 구성해야한다. entity를 찾을 수 없다고 나오는 건 그 때문... --;
//import org.jooq.codegen.GenerationTool
//import org.jooq.meta.jaxb.Configuration
//import org.jooq.meta.jaxb.Database
//import org.jooq.meta.jaxb.Generator
//import org.jooq.meta.jaxb.Property
//
//GenerationTool.generate(new Configuration()
//        .withGenerator(new Generator()
//                .withDatabase(new Database()
//                        .withName("org.jooq.meta.extensions.jpa.JPADatabase")
//                        .withProperties(
//                                // A comma separated list of Java packages, that contain your entities
//                                new Property()
//                                        .withKey("packages")
//                                        .withValue("com.example.springjooq.entity"),
//                                new Property()
//                                        .withKey("useAttributeConverters")
//                                        .withValue("true"),
//                                new Property()
//                                        .withKey("unqualifiedSchema")
//                                        .withValue("none")
//                        ))))


// 4. entity
//import org.jooq.codegen.GenerationTool
//import org.jooq.meta.jaxb.*
//
//task generateCode() {
//    GenerationTool.generate(new org.jooq.meta.jaxb.Configuration()
//            .withGenerator(new Generator()
//                    .withDatabase(new Database()
//                            .withName("org.jooq.meta.extensions.jpa.JPADatabase")
////                            .withIncludes(".*")
//                            .withProperties(
//
//                                    // A comma separated list of Java packages, that contain your entities
//                                    new Property()
//                                            .withKey("packages")
//                                            .withValue("com.example.springjooq.entity"),
//
//                                    // Whether JPA 2.1 AttributeConverters should be auto-mapped to jOOQ Converters.
//                                    // Custom <forcedType/> configurations will have a higher priority than these auto-mapped converters.
//                                    // This defaults to true.
//                                    new Property()
//                                            .withKey("useAttributeConverters")
//                                            .withValue("true"),
//
//                                    // The default schema for unqualified objects:
//                                    //
//                                    // - public: all unqualified objects are located in the PUBLIC (upper case) schema
//                                    // - none: all unqualified objects are located in the default schema (default)
//                                    //
//                                    // This configuration can be overridden with the schema mapping feature
//                                    new Property()
//                                            .withKey("unqualifiedSchema")
//                                            .withValue("none")
//                            )
//                    )
//                    .withTarget(new Target()
//                            .withPackageName(projectDir.toString() + "jooq.generated.example")
//                            .withDirectory("src/main/java")
//                    )))
//}